<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XmlValidationService</name>
    </assembly>
    <members>
        <member name="T:XmlValidationService.Configurations.DiagnosticSettings">
            <summary>
            Contains settings for enabling swagger
            </summary>
        </member>
        <member name="P:XmlValidationService.Configurations.DiagnosticSettings.EnvironmentVariableToEnableSwagger">
            <summary>
            Environment variable name which when defined will cause the Swagger UI to be shown
            </summary>
        </member>
        <member name="T:XmlValidationService.Controllers.XmlValidationServiceController">
            <summary>
            Xml Validation Service
            </summary>
        </member>
        <member name="M:XmlValidationService.Controllers.XmlValidationServiceController.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{XmlValidationService.Controllers.XmlValidationServiceController},XmlValidationService.IServerResourceControl)">
            <summary>
            Set resource control objects
            </summary>
        </member>
        <member name="M:XmlValidationService.Controllers.XmlValidationServiceController.GetSchemaSets">
            <summary>
            Gets a list of names all installed schema sets
            </summary>
            <returns>Names of all installed schema sets</returns>
        </member>
        <member name="M:XmlValidationService.Controllers.XmlValidationServiceController.GetSchemaSet(System.String)">
            <summary>
            Get a specific set of schemas
            </summary>
            <returns>A specific schema set</returns>
        </member>
        <member name="M:XmlValidationService.Controllers.XmlValidationServiceController.GetSchema(System.String,System.String)">
            <summary>
            Get whether a specific schema exists
            </summary>
            <returns>True if a specific schema exists</returns>
        </member>
        <member name="M:XmlValidationService.Controllers.XmlValidationServiceController.ValidateXml(XmlValidationService.Dtos.ValidateXmlDto)">
            <summary>
            Validates an XML file against a schema
            </summary>
            <returns>Result</returns>
        </member>
        <member name="T:XmlValidationService.Dtos.SchemaSetDescriptorDto">
            <summary>
            Represents the name of a single schema set returned to the caller
            </summary>
        </member>
        <member name="M:XmlValidationService.Dtos.SchemaSetDescriptorDto.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the schema set</param>
        </member>
        <member name="P:XmlValidationService.Dtos.SchemaSetDescriptorDto.Name">
            <summary>
            Gets the name of the schema set
            </summary>
        </member>
        <member name="T:XmlValidationService.Dtos.SchemaSetDto">
            <summary>
            Represents a schema set, with a name and a list of .xsd files.
            </summary>
        </member>
        <member name="M:XmlValidationService.Dtos.SchemaSetDto.#ctor(System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            A schema set
            </summary>
            <param name="name">The name of the schema set</param>
            <param name="path">The path of the schema set</param>
            <param name="schemas">List of .xsd file names</param>
        </member>
        <member name="P:XmlValidationService.Dtos.SchemaSetDto.Name">
            <summary>
            Name of the schema set
            </summary>
        </member>
        <member name="P:XmlValidationService.Dtos.SchemaSetDto.Path">
            <summary>
            Full path to the directory the schema set is in
            </summary>
        </member>
        <member name="P:XmlValidationService.Dtos.SchemaSetDto.Schemas">
            <summary>
            List of .xsd file names
            </summary>
        </member>
        <member name="T:XmlValidationService.Dtos.ValidateXmlDto">
            <summary>
            Represents a schema set, with a name and a list of .xsd files.
            </summary>
        </member>
        <member name="M:XmlValidationService.Dtos.ValidateXmlDto.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:XmlValidationService.Dtos.ValidateXmlDto.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="setName">Name of the schema set</param>
            <param name="schemaName">Name of the schema</param>
            <param name="xmlPath">Path to the XML file</param>
        </member>
        <member name="P:XmlValidationService.Dtos.ValidateXmlDto.SetName">
            <summary>
            The set name that the schema belongs to
            </summary>
        </member>
        <member name="P:XmlValidationService.Dtos.ValidateXmlDto.Schema">
            <summary>
            The name (not full path) of the schema
            </summary>
        </member>
        <member name="P:XmlValidationService.Dtos.ValidateXmlDto.XmlFilePath">
            <summary>
            The full path to the XML file that needs validation
            </summary>
        </member>
        <member name="T:XmlValidationService.GlobalExceptionHandler.ErrorDetails">
            <summary>
            Details an error message
            </summary>
        </member>
        <member name="P:XmlValidationService.GlobalExceptionHandler.ErrorDetails.StatusCode">
            <summary>
            Status code for the error
            </summary>
        </member>
        <member name="P:XmlValidationService.GlobalExceptionHandler.ErrorDetails.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:XmlValidationService.GlobalExceptionHandler.ErrorDetails.ToString">
            <summary>
            Serializes this to a JSON string
            </summary>
            <returns>A JSON string representing the error message</returns>
        </member>
        <member name="T:XmlValidationService.GlobalExceptionHandler.ExceptionMiddlewareExtensions">
            <summary>
            Provides a method to configure the exception handler for the application
            </summary>
        </member>
        <member name="M:XmlValidationService.GlobalExceptionHandler.ExceptionMiddlewareExtensions.ConfigureExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configures the exception handler
            </summary>
            <param name="app">The application</param>
        </member>
        <member name="T:XmlValidationService.IServerResourceControl">
            <summary>
            Provides methods for validating XML
            </summary>
        </member>
        <member name="M:XmlValidationService.IServerResourceControl.TryGetSchemaSets(System.Collections.Generic.IList{XmlValidationService.Dtos.SchemaSetDescriptorDto}@)">
            <summary>
            Gets the list of schema sets
            </summary>
            <param name="schemaset">The list of schema sets</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:XmlValidationService.IServerResourceControl.TryGetSchemaSet(System.String,XmlValidationService.Dtos.SchemaSetDto@)">
            <summary>
            Tries to get a single schema set based on the name passed in
            </summary>
            <param name="name">The name of the requested schema set</param>
            <param name="schemaset">The schema set that was requested</param>
            <returns>True if the requested schema set exists, false otherwise</returns>
        </member>
        <member name="M:XmlValidationService.IServerResourceControl.TryGetSchema(System.String,System.String)">
            <summary>
            Test to see if a specific schema exists within the given schema set
            </summary>
            <param name="name">Name of the schema set</param>
            <param name="schema">Name of the schema</param>
            <returns>True if the schema exists in the schema set, false otherwise</returns>
        </member>
        <member name="M:XmlValidationService.IServerResourceControl.TryValidate(System.String,System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Test to see if the given XML file is valid woth the given schema
            </summary>
            <param name="xmlPath">Path to the XML file</param>
            <param name="schemaPath">Path to the schema file</param>
            <param name="errors">List of validation errors</param>
            <returns></returns>
        </member>
        <member name="T:XmlValidationService.Models.SchemaSet">
            <summary>
            Model for a single schema set
            </summary>
        </member>
        <member name="P:XmlValidationService.Models.SchemaSet.Name">
            <summary>
            Name of the schema set
            </summary>
        </member>
        <member name="P:XmlValidationService.Models.SchemaSet.Path">
            <summary>
            Path to the schema set
            </summary>
        </member>
        <member name="P:XmlValidationService.Models.SchemaSet.Schemas">
            <summary>
            List of .xsd file names
            </summary>
        </member>
        <member name="T:XmlValidationService.Program">
            <summary>
            Main program
            </summary>
        </member>
        <member name="M:XmlValidationService.Program.Main(System.String[])">
            <summary>
            Main method
            </summary>
            <param name="args">Arguments</param>
        </member>
        <member name="M:XmlValidationService.Program.CreateHostBuilder(System.String[])">
            <summary>
            Creates the hose
            </summary>
            <param name="args">Arguments</param>
            <returns>The hose</returns>
        </member>
        <member name="T:XmlValidationService.ServerResourceControl">
            <summary>
            Provides methods for validating XML
            </summary>
        </member>
        <member name="M:XmlValidationService.ServerResourceControl.#ctor(Microsoft.Extensions.Logging.ILogger{XmlValidationService.ServerResourceControl})">
            <summary>
            Constructor
            </summary>
            <param name="logger">The logger</param>
        </member>
        <member name="M:XmlValidationService.ServerResourceControl.#ctor(System.Collections.Generic.IList{XmlValidationService.Models.SchemaSet},Microsoft.Extensions.Logging.ILogger{XmlValidationService.ServerResourceControl})">
            <summary>
            Internal constructor
            </summary>
            <param name="schemas">List of schema sets</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:XmlValidationService.ServerResourceControl.GetListOfSchemaSets(Microsoft.Extensions.Logging.ILogger{XmlValidationService.ServerResourceControl})">
            <summary>
            Reads the filesystem to gather a list of installed schema sets
            </summary>
            <param name="logger">The logger</param>
            <returns>A list of schema sets on the file system</returns>
        </member>
        <member name="M:XmlValidationService.ServerResourceControl.TryGetSchemaSets(System.Collections.Generic.IList{XmlValidationService.Dtos.SchemaSetDescriptorDto}@)">
            <summary>
            Gets the list of schema sets
            </summary>
            <param name="schemaset">The list of schema sets</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:XmlValidationService.ServerResourceControl.TryGetSchemaSet(System.String,XmlValidationService.Dtos.SchemaSetDto@)">
            <summary>
            Tries to get a single schema set based on the name passed in
            </summary>
            <param name="name">The name of the requested schema set</param>
            <param name="schemaset">The schema set that was requested</param>
            <returns>True if the requested schema set exists, false otherwise</returns>
        </member>
        <member name="M:XmlValidationService.ServerResourceControl.TryGetSchema(System.String,System.String)">
            <summary>
            Test to see if a specific schema exists within the given schema set
            </summary>
            <param name="name">Name of the schema set</param>
            <param name="schema">Name of the schema</param>
            <returns>True if the schema exists in the schema set, false otherwise</returns>
        </member>
        <member name="M:XmlValidationService.ServerResourceControl.TryValidate(System.String,System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Tries to validate the given xml file with the given schema file
            </summary>
            <param name="xmlPath">Path to the XML file</param>
            <param name="schemaPath">Path to the schema file</param>
            <param name="errors">List of validation errors</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="T:XmlValidationService.Startup">
            <summary>
            Startup the service
            </summary>
        </member>
        <member name="M:XmlValidationService.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:XmlValidationService.Startup.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="P:XmlValidationService.Startup.AutofacContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XmlValidationService.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            Register objects directly  with Autofac. This runs after ConfigureServices so the things
            here will override registrations made in ConfigureServices.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:XmlValidationService.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:XmlValidationService.Startup.ConfigureDevelopmentServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <remarks>
            This version of ConfigureServices is called when the service is started in Development. Similar to how env.IsDevelopment() works.
            </remarks>
            <param name="services"></param>
        </member>
        <member name="M:XmlValidationService.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Logging.ILogger{XmlValidationService.Controllers.XmlValidationServiceController})">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="logger"></param>
        </member>
        <member name="T:XmlValidationService.Validation.XmlValidator">
            <summary>
            Class to validate XML files
            </summary>
        </member>
        <member name="M:XmlValidationService.Validation.XmlValidator.#ctor(Microsoft.Extensions.Logging.ILogger{XmlValidationService.ServerResourceControl})">
            <summary>
            Constructor
            </summary>
            <param name="logger">Logger</param>
        </member>
        <member name="M:XmlValidationService.Validation.XmlValidator.Validate(System.String,System.String)">
            <summary>
            Validates an XML file against a schema
            </summary>
            <param name="xmlPath">Path to the XML file</param>
            <param name="schemaPath">Path to the schema</param>
            <returns>True if it's valid, false otherwise</returns>
        </member>
        <member name="M:XmlValidationService.Validation.XmlValidator.ValidationEventHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Event handler called when a validation issue occurs
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:XmlValidationService.Validation.XmlValidator.Errors">
            <summary>
            Gets a list of validations errors
            </summary>
        </member>
    </members>
</doc>
